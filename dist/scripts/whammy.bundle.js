(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{222:function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {/*\n\tvar vid = new Whammy.Video();\n\tvid.add(canvas or data url)\n\tvid.compile()\n*/\n\nglobal.Whammy = (function(){\n\t// in this case, frames has a very specific meaning, which will be \n\t// detailed once i finish writing the code\n\n\tfunction toWebM(frames, outputAsArray){\n\t\tvar info = checkFrames(frames);\n\n\t\t//max duration by cluster in milliseconds\n\t\tvar CLUSTER_MAX_DURATION = 30000;\n\t\t\n\t\tvar EBML = [\n\t\t\t{\n\t\t\t\t"id": 0x1a45dfa3, // EBML\n\t\t\t\t"data": [\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 1,\n\t\t\t\t\t\t"id": 0x4286 // EBMLVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 1,\n\t\t\t\t\t\t"id": 0x42f7 // EBMLReadVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 4,\n\t\t\t\t\t\t"id": 0x42f2 // EBMLMaxIDLength\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 8,\n\t\t\t\t\t\t"id": 0x42f3 // EBMLMaxSizeLength\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": "webm",\n\t\t\t\t\t\t"id": 0x4282 // DocType\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 2,\n\t\t\t\t\t\t"id": 0x4287 // DocTypeVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t"data": 2,\n\t\t\t\t\t\t"id": 0x4285 // DocTypeReadVersion\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t"id": 0x18538067, // Segment\n\t\t\t\t"data": [\n\t\t\t\t\t{ \n\t\t\t\t\t\t"id": 0x1549a966, // Info\n\t\t\t\t\t\t"data": [\n\t\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t\t"data": 1e6, //do things in millisecs (num of nanosecs for duration scale)\n\t\t\t\t\t\t\t\t"id": 0x2ad7b1 // TimecodeScale\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t"data": "whammy",\n\t\t\t\t\t\t\t\t"id": 0x4d80 // MuxingApp\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t"data": "whammy",\n\t\t\t\t\t\t\t\t"id": 0x5741 // WritingApp\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t"data": doubleToString(info.duration),\n\t\t\t\t\t\t\t\t"id": 0x4489 // Duration\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t"id": 0x1654ae6b, // Tracks\n\t\t\t\t\t\t"data": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t"id": 0xae, // TrackEntry\n\t\t\t\t\t\t\t\t"data": [\n\t\t\t\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t\t\t\t"data": 1,\n\t\t\t\t\t\t\t\t\t\t"id": 0xd7 // TrackNumber\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": 1,\n\t\t\t\t\t\t\t\t\t\t"id": 0x63c5 // TrackUID\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": 0,\n\t\t\t\t\t\t\t\t\t\t"id": 0x9c // FlagLacing\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": "und",\n\t\t\t\t\t\t\t\t\t\t"id": 0x22b59c // Language\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": "V_VP8",\n\t\t\t\t\t\t\t\t\t\t"id": 0x86 // CodecID\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": "VP8",\n\t\t\t\t\t\t\t\t\t\t"id": 0x258688 // CodecName\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t"data": 1,\n\t\t\t\t\t\t\t\t\t\t"id": 0x83 // TrackType\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t"id": 0xe0,  // Video\n\t\t\t\t\t\t\t\t\t\t"data": [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t"data": info.width,\n\t\t\t\t\t\t\t\t\t\t\t\t"id": 0xb0 // PixelWidth\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\t\t"data": info.height,\n\t\t\t\t\t\t\t\t\t\t\t\t"id": 0xba // PixelHeight\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\t//cluster insertion point\n\t\t\t\t]\n\t\t\t}\n\t\t ];\n\n\t\t\t\t\t\t\n\t\t//Generate clusters (max duration)\n\t\tvar frameNumber = 0;\n\t\tvar clusterTimecode = 0;\n\t\twhile(frameNumber < frames.length){\n\t\t\t\n\t\t\tvar clusterFrames = [];\n\t\t\tvar clusterDuration = 0;\n\t\t\tdo {\n\t\t\t\tclusterFrames.push(frames[frameNumber]);\n\t\t\t\tclusterDuration += frames[frameNumber].duration;\n\t\t\t\tframeNumber++;\t\t\t\t\n\t\t\t}while(frameNumber < frames.length && clusterDuration < CLUSTER_MAX_DURATION);\n\t\t\t\t\t\t\n\t\t\tvar clusterCounter = 0;\t\t\t\n\t\t\tvar cluster = {\n\t\t\t\t\t"id": 0x1f43b675, // Cluster\n\t\t\t\t\t"data": [\n\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t"data": clusterTimecode,\n\t\t\t\t\t\t\t"id": 0xe7 // Timecode\n\t\t\t\t\t\t}\n\t\t\t\t\t].concat(clusterFrames.map(function(webp){\n\t\t\t\t\t\tvar block = makeSimpleBlock({\n\t\t\t\t\t\t\tdiscardable: 0,\n\t\t\t\t\t\t\tframe: webp.data.slice(4),\n\t\t\t\t\t\t\tinvisible: 0,\n\t\t\t\t\t\t\tkeyframe: 1,\n\t\t\t\t\t\t\tlacing: 0,\n\t\t\t\t\t\t\ttrackNum: 1,\n\t\t\t\t\t\t\ttimecode: Math.round(clusterCounter)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tclusterCounter += webp.duration;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: block,\n\t\t\t\t\t\t\tid: 0xa3\n\t\t\t\t\t\t};\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\n\t\t\t//Add cluster to segment\n\t\t\tEBML[1].data.push(cluster);\t\t\t\n\t\t\tclusterTimecode += clusterDuration;\n\t\t}\n\t\t\t\t\t\t\n\t\treturn generateEBML(EBML, outputAsArray)\n\t}\n\n\t// sums the lengths of all the frames and gets the duration, woo\n\n\tfunction checkFrames(frames){\n\t\tvar width = frames[0].width, \n\t\t\theight = frames[0].height, \n\t\t\tduration = frames[0].duration;\n\t\tfor(var i = 1; i < frames.length; i++){\n\t\t\tif(frames[i].width != width) throw "Frame " + (i + 1) + " has a different width";\n\t\t\tif(frames[i].height != height) throw "Frame " + (i + 1) + " has a different height";\n\t\t\tif(frames[i].duration < 0 || frames[i].duration > 0x7fff) throw "Frame " + (i + 1) + " has a weird duration (must be between 0 and 32767)";\n\t\t\tduration += frames[i].duration;\n\t\t}\n\t\treturn {\n\t\t\tduration: duration,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\tfunction numToBuffer(num){\n\t\tvar parts = [];\n\t\twhile(num > 0){\n\t\t\tparts.push(num & 0xff)\n\t\t\tnum = num >> 8\n\t\t}\n\t\treturn new Uint8Array(parts.reverse());\n\t}\n\n\tfunction strToBuffer(str){\n\t\t// return new Blob([str]);\n\n\t\tvar arr = new Uint8Array(str.length);\n\t\tfor(var i = 0; i < str.length; i++){\n\t\t\tarr[i] = str.charCodeAt(i)\n\t\t}\n\t\treturn arr;\n\t\t// this is slower\n\t\t// return new Uint8Array(str.split(\'\').map(function(e){\n\t\t// \treturn e.charCodeAt(0)\n\t\t// }))\n\t}\n\n\n\t//sorry this is ugly, and sort of hard to understand exactly why this was done\n\t// at all really, but the reason is that there\'s some code below that i dont really\n\t// feel like understanding, and this is easier than using my brain.\n\n\tfunction bitsToBuffer(bits){\n\t\tvar data = [];\n\t\tvar pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join(\'0\') : \'\';\n\t\tbits = pad + bits;\n\t\tfor(var i = 0; i < bits.length; i+= 8){\n\t\t\tdata.push(parseInt(bits.substr(i,8),2))\n\t\t}\n\t\treturn new Uint8Array(data);\n\t}\n\n\tfunction generateEBML(json, outputAsArray){\n\t\tvar ebml = [];\n\t\tfor(var i = 0; i < json.length; i++){\n\t\t\tvar data = json[i].data;\n\t\t\tif(typeof data == \'object\') data = generateEBML(data, outputAsArray);\t\t\t\t\t\n\t\t\tif(typeof data == \'number\') data = bitsToBuffer(data.toString(2));\n\t\t\tif(typeof data == \'string\') data = strToBuffer(data);\n\n\t\t\tif(data.length){\n\t\t\t\tvar z = z;\n\t\t\t}\n\t\t\t\n\t\t\tvar len = data.size || data.byteLength || data.length;\n\t\t\tvar zeroes = Math.ceil(Math.ceil(Math.log(len)/Math.log(2))/8);\n\t\t\tvar size_str = len.toString(2);\n\t\t\tvar padded = (new Array((zeroes * 7 + 7 + 1) - size_str.length)).join(\'0\') + size_str;\n\t\t\tvar size = (new Array(zeroes)).join(\'0\') + \'1\' + padded;\n\t\t\t\n\t\t\t//i actually dont quite understand what went on up there, so I\'m not really\n\t\t\t//going to fix this, i\'m probably just going to write some hacky thing which\n\t\t\t//converts that string into a buffer-esque thing\n\n\t\t\tebml.push(numToBuffer(json[i].id));\n\t\t\tebml.push(bitsToBuffer(size));\n\t\t\tebml.push(data)\n\t\t\t\n\n\t\t}\n\t\t\n\t\t//output as blob or byteArray\n\t\tif(outputAsArray){\n\t\t\t//convert ebml to an array\n\t\t\tvar buffer = toFlatArray(ebml)\n\t\t\treturn new Uint8Array(buffer);\n\t\t}else{\n\t\t\treturn new Blob(ebml, {type: "video/webm"});\n\t\t}\n\t}\n\t\n\tfunction toFlatArray(arr, outBuffer){\n\t\tif(outBuffer == null){\n\t\t\toutBuffer = [];\n\t\t}\n\t\tfor(var i = 0; i < arr.length; i++){\n\t\t\tif(typeof arr[i] == \'object\'){\n\t\t\t\t//an array\n\t\t\t\ttoFlatArray(arr[i], outBuffer)\n\t\t\t}else{\n\t\t\t\t//a simple element\n\t\t\t\toutBuffer.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn outBuffer;\n\t}\n\t\n\t//OKAY, so the following two functions are the string-based old stuff, the reason they\'re\n\t//still sort of in here, is that they\'re actually faster than the new blob stuff because\n\t//getAsFile isn\'t widely implemented, or at least, it doesn\'t work in chrome, which is the\n\t// only browser which supports get as webp\n\n\t//Converting between a string of 0010101001\'s and binary back and forth is probably inefficient\n\t//TODO: get rid of this function\n\tfunction toBinStr_old(bits){\n\t\tvar data = \'\';\n\t\tvar pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join(\'0\') : \'\';\n\t\tbits = pad + bits;\n\t\tfor(var i = 0; i < bits.length; i+= 8){\n\t\t\tdata += String.fromCharCode(parseInt(bits.substr(i,8),2))\n\t\t}\n\t\treturn data;\n\t}\n\n\tfunction generateEBML_old(json){\n\t\tvar ebml = \'\';\n\t\tfor(var i = 0; i < json.length; i++){\n\t\t\tvar data = json[i].data;\n\t\t\tif(typeof data == \'object\') data = generateEBML_old(data);\n\t\t\tif(typeof data == \'number\') data = toBinStr_old(data.toString(2));\n\t\t\t\n\t\t\tvar len = data.length;\n\t\t\tvar zeroes = Math.ceil(Math.ceil(Math.log(len)/Math.log(2))/8);\n\t\t\tvar size_str = len.toString(2);\n\t\t\tvar padded = (new Array((zeroes * 7 + 7 + 1) - size_str.length)).join(\'0\') + size_str;\n\t\t\tvar size = (new Array(zeroes)).join(\'0\') + \'1\' + padded;\n\n\t\t\tebml += toBinStr_old(json[i].id.toString(2)) + toBinStr_old(size) + data;\n\n\t\t}\n\t\treturn ebml;\n\t}\n\n\t//woot, a function that\'s actually written for this project!\n\t//this parses some json markup and makes it into that binary magic\n\t//which can then get shoved into the matroska comtainer (peaceably)\n\n\tfunction makeSimpleBlock(data){\n\t\tvar flags = 0;\n\t\tif (data.keyframe) flags |= 128;\n\t\tif (data.invisible) flags |= 8;\n\t\tif (data.lacing) flags |= (data.lacing << 1);\n\t\tif (data.discardable) flags |= 1;\n\t\tif (data.trackNum > 127) {\n\t\t\tthrow "TrackNumber > 127 not supported";\n\t\t}\n\t\tvar out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e){\n\t\t\treturn String.fromCharCode(e)\n\t\t}).join(\'\') + data.frame;\n\n\t\treturn out;\n\t}\n\n\t// here\'s something else taken verbatim from weppy, awesome rite?\n\n\tfunction parseWebP(riff){\n\t\tvar VP8 = riff.RIFF[0].WEBP[0];\n\t\t\n\t\tvar frame_start = VP8.indexOf(\'\\x9d\\x01\\x2a\'); //A VP8 keyframe starts with the 0x9d012a header\n\t\tfor(var i = 0, c = []; i < 4; i++) c[i] = VP8.charCodeAt(frame_start + 3 + i);\n\t\t\n\t\tvar width, horizontal_scale, height, vertical_scale, tmp;\n\t\t\n\t\t//the code below is literally copied verbatim from the bitstream spec\n\t\ttmp = (c[1] << 8) | c[0];\n\t\twidth = tmp & 0x3FFF;\n\t\thorizontal_scale = tmp >> 14;\n\t\ttmp = (c[3] << 8) | c[2];\n\t\theight = tmp & 0x3FFF;\n\t\tvertical_scale = tmp >> 14;\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: VP8,\n\t\t\triff: riff\n\t\t}\n\t}\n\n\t// i think i\'m going off on a riff by pretending this is some known\n\t// idiom which i\'m making a casual and brilliant pun about, but since\n\t// i can\'t find anything on google which conforms to this idiomatic\n\t// usage, I\'m assuming this is just a consequence of some psychotic\n\t// break which makes me make up puns. well, enough riff-raff (aha a\n\t// rescue of sorts), this function was ripped wholesale from weppy\n\n\tfunction parseRIFF(string){\n\t\tvar offset = 0;\n\t\tvar chunks = {};\n\t\t\n\t\twhile (offset < string.length) {\n\t\t\tvar id = string.substr(offset, 4);\n\t\t\tvar len = parseInt(string.substr(offset + 4, 4).split(\'\').map(function(i){\n\t\t\t\tvar unpadded = i.charCodeAt(0).toString(2);\n\t\t\t\treturn (new Array(8 - unpadded.length + 1)).join(\'0\') + unpadded\n\t\t\t}).join(\'\'),2);\n\t\t\tvar data = string.substr(offset + 4 + 4, len);\n\t\t\toffset += 4 + 4 + len;\n\t\t\tchunks[id] = chunks[id] || [];\n\t\t\t\n\t\t\tif (id == \'RIFF\' || id == \'LIST\') {\n\t\t\t\tchunks[id].push(parseRIFF(data));\n\t\t\t} else {\n\t\t\t\tchunks[id].push(data);\n\t\t\t}\n\t\t}\n\t\treturn chunks;\n\t}\n\n\t// here\'s a little utility function that acts as a utility for other functions\n\t// basically, the only purpose is for encoding "Duration", which is encoded as\n\t// a double (considerably more difficult to encode than an integer)\n\tfunction doubleToString(num){\n\t\treturn [].slice.call(\n\t\t\tnew Uint8Array(\n\t\t\t\t(\n\t\t\t\t\tnew Float64Array([num]) //create a float64 array\n\t\t\t\t).buffer) //extract the array buffer\n\t\t\t, 0) // convert the Uint8Array into a regular array\n\t\t\t.map(function(e){ //since it\'s a regular array, we can now use map\n\t\t\t\treturn String.fromCharCode(e) // encode all the bytes individually\n\t\t\t})\n\t\t\t.reverse() //correct the byte endianness (assume it\'s little endian for now)\n\t\t\t.join(\'\') // join the bytes in holy matrimony as a string\n\t}\n\n\tfunction WhammyVideo(speed, quality){ // a more abstract-ish API\n\t\tthis.frames = [];\n\t\tthis.duration = 1000 / speed;\n\t\tthis.quality = quality || 0.8;\n\t}\n\n\tWhammyVideo.prototype.add = function(frame, duration){\n\t\tif(typeof duration != \'undefined\' && this.duration) throw "you can\'t pass a duration if the fps is set";\n\t\tif(typeof duration == \'undefined\' && !this.duration) throw "if you don\'t have the fps set, you ned to have durations here."\n\t\tif(\'canvas\' in frame){ //CanvasRenderingContext2D\n\t\t\tframe = frame.canvas;\t\n\t\t}\n\t\tif(\'toDataURL\' in frame){\n\t\t\tframe = frame.toDataURL(\'image/webp\', this.quality)\n\t\t}else if(typeof frame != "string"){\n\t\t\tthrow "frame must be a a HTMLCanvasElement, a CanvasRenderingContext2D or a DataURI formatted string"\n\t\t}\n\t\tif (!(/^data:image\\/webp;base64,/ig).test(frame)) {\n\t\t\tthrow "Input must be formatted properly as a base64 encoded DataURI of type image/webp";\n\t\t}\n\t\tthis.frames.push({\n\t\t\timage: frame,\n\t\t\tduration: duration || this.duration\n\t\t})\n\t}\n\t\n\tWhammyVideo.prototype.compile = function(outputAsArray){\n\t\treturn new toWebM(this.frames.map(function(frame){\n\t\t\tvar webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n\t\t\twebp.duration = frame.duration;\n\t\t\treturn webp;\n\t\t}), outputAsArray)\n\t}\n\n\treturn {\n\t\tVideo: WhammyVideo,\n\t\tfromImageArray: function(images, fps, outputAsArray){\n\t\t\treturn toWebM(images.map(function(image){\n\t\t\t\tvar webp = parseWebP(parseRIFF(atob(image.slice(23))))\n\t\t\t\twebp.duration = 1000 / fps;\n\t\t\t\treturn webp;\n\t\t\t}), outputAsArray)\n\t\t},\n\t\ttoWebM: toWebM\n\t\t// expose methods of madness\n\t}\n})();\n\nif (typeof process !== \'undefined\') module.exports = Whammy;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(10), __webpack_require__(94)))\n\n//# sourceURL=webpack:///./node_modules/whammy/whammy.js?')}}]);